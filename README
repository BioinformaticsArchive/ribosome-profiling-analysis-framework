RIBOSOME PROFILING PROJECT, DISCOVERING TRIPLET PERIODICITY AND ALTERNATIVE ORFs
================================================================================

WORKFLOW
--------------------------------------------------------------------------------
If you're doing alignment on the genome only, skip to 7).

1) If you're doing alignment on the transcriptome, you'll get positions based on
the start of the transcript, instead of the start of the open reading frame.
The method used here to do this mapping, is Mutalyzer. For this, we first need
to get from transcriptome positions, to genomic positions. Since the transcrip-
tome sequences do not always align well to the genome, first the transcriptome
reference sequence needs to be filtered for transcripts that do not support this
alignment. For all the other transcripts, you need a file that indicates the
location of the exons of the transcripts on the genome. The NCBI file is not
usable, and Mutalyzer can not do this step either. See the help file
help/mm10_transcript_positions_create.txt for more information.

Usage: ./mm10_transcript_positions_create.php TRANSCRIPTOME_ALIGNMENT_SAM_FILE

Produces:
- mm10_transcript_positions.txt
  Contains the genomic locations of all exons of each useful transcript.
- transcriptome_alignment_unsupported_transcripts.txt
  Contains all unsupported transcripts and the reasons for rejection.



2) Also interesting to know is which transcripts might pose problems when
aligning reads to the genome. These are the transcripts where close to the
translation start site an intron is located. This information can not be deduced
from the transcript-to-genome alignment SAM file from step 1, since that does
not indicate where the translation start site is located. For this, we download
a file from the NCBI that has the annotation of exons and the translated region
for each transcript:
ftp://ftp.ncbi.nih.gov/genomes/M_musculus/mapview/seq_gene.md.gz
The find_distance_to_ATG.php script extracts this information and creates two
files; one with problematic transcripts, sorted on the distance to the closest
intron, and one file with transcripts where no UTR is annotated so where the
distance to the 5' intron is unknown.
A distance of 15 bases to the ATG is currently the default threshold.

Usage: ./find_intron_distance_to_ATG.php path_to_seq_gene.md

Produces:
- seq_gene.md.distance_intron_to_ATG.txt
  Lists all transcripts where the distance of the intron to the ATG is 15 or
  less (distance is configurable by editing the file).
- seq_gene.md.distance_intron_to_ATG_errors.txt
  Lists all transcripts that have no UTR annotated, thus the 5' distance to an
  intron is unknown. For all these transcripts, the 3' distance is safe (> 15).



3) After doing the alignment of the ribosome profiling reads on the transcrip-
tome, unsupported transcripts removed, you end up with SAM files.
The SAM files are first packed, reducing them in size and grouping the reads
together to generate a file that sums the coverage per transcript per position.
For this, use the pack_sam_files.php file.

Usage: ./pack_sam_files.php SAM_FILE1 [SAM_FILE2 [SAM_FILE3 [...]]]

Produces:
- For each given SAM file, a SAM.packed file.
  Contains the transcript ID, the position relative to the start of the tran-
  script, and the total coverage for that position, i.e. the number of reads
  aligned starting at this position.



4) The packed SAM files can be used to run some statistics. Currently available
is packed_sam2coverage_per_gene.php.

Usage: ./packed_sam2coverage_per_gene.php path_to_mm10_gene_list.txt \
           PACKED_SAM_FILE1 [ PACKED_SAM_FILE2 [ ... ]]

Produces:
- One file which name depends on the given SAM files, ending in the suffix
  .coverage_per_gene.txt, with per SAM file, mentioned which transcripts can not
  be matched to a gene, listing the top 5 unknown transcripts based on their
  coverage and finally, a large table where the samples are presented as columns
  and on each line the genes are given with the coverage in each sample. The
  genes are sorted on total coverage in all samples together.

Other statistics can be run directly on the packed SAM files, for instance how
many reads are mapped to non-coding reads.



5) The packed SAM files are used to generate Wiggle files. For this, use the
packed_sam2wiggle.php script, which needs the transcript positions file descri-
bed in 1).

Usage: ./packed_sam2wiggle.php TRANSCRIPT_POSITIONS_FILE \
           PACKED_SAM_FILE1 [PACKED_SAM_FILE2 [PACKED_SAM_FILE3 [...]]

Produces:
- 4 Wiggle files per SAM file;
  + F unfiltered,
  + F filtered (NR and XR removed),
  + R unfiltered,
  + R filtered (NR and XR removed).



6) Optionally, if genome alignment has been done as well as transcriptome align-
ment, the Wiggle files from both alignments can be merged together. This is done
using the "wiggelen" package written by Martijn Vermaat and Jeroen Laros.
For detailed information, see the help file help/merge_wigglefiles.txt.



7) Wiggle files are converted to Mutalyzer position converter batch files using
the wig2batchfile.php script.

Usage: ./wig2batchfile.php WIG_FILE

Produces:
- One Mutalyzer batch input file. If multiple Wiggle files are passed as argu-
  ments, the script will generate one big Mutalyzer batch input file. However,
  please note that the analysis script does not support working with one large
  Mutalyzer result file, so it means you'll have to split it again after running
  Mutalyzer.



8) The position converter batch files are manually loaded into Mutalyzer:
https://mutalyzer.nl/batchPositionConverter
or
https://test.mutalyzer.nl/batchPositionConverter
(this test installation is slightly faster because it doesn't have much traffic,
 but it doesn't support emailing you the link to the results)



9) When done, the results are downloaded from Mutalyzer. If you're not sure
anymore which results file belongs to which batchfile, you can match these files
by using the match_mutalyzer_output_to_batchfile.sh script.

Usage:
./match_mutalyzer_output_to_batchfile.sh <MUTALYZER_OUTPUT_FILES> <BATCH_FILES>

This script will rename the Mutalyzer results files according to the batch input
files.

The results files can be analyzed using the analyze_triplet_periodicity.php
script, that checks the triplet periodicity and shows if the ribosomes have
indeed been stopped at the start sites.

Usage:
./analyze_triplet_periodicity.php MUTALYZER_FILE WIGGLE_FILE GENE_LIST_FILE STRAND

Example:
./analyze_triplet_periodicity.php F.wig5_mutalyzer_batchfile_results.txt F.wig5 \
  mm10_gene_list.txt F > F.wig5.periodicity.txt
(Valid values for Strand: +, -, F and R)

Produces:
- Direct output to the screen (which should then be saved to a file if needed)
  with detailed statistics about the mapping of the positions to the
  transcriptome by Mutalyzer, followed by the list of positions relative to the
  translation start site, and the total coverage for each position. Of the posi-
  tions in the coding region, only the first 6 are shown individually. All posi-
  tions in the coding region, including the positions up to 15 bases upstream of
  the coding region, are grouped by their location in the codon (first, second
  and third base), and displayed as positions %1, %2 and %3 respectively, with
  the summed coverages to assess the overall triplet periodicity.
  Positions starting with an asterisk (*) are positions in the 3' UTR. The given
  number is the relative distance to the stop codon: *1 is the first base after
  the stop codon.

The script does the following things:
+ Read out the coverage information from the Wiggle file
+ Read the gene list to find out which genes (transcripts, actually) are on
  which strand
+ Read the Mutalyzer result file to see which locations map to which
  transcripts, determining the position within the transcript
  * Filter low coverage positions (< 3)
  * Mappings on non-coding transcripts are ignored
  * Mappings on transcripts on the other strand are ignored
  * Transcripts not in the gene list are ignored and reported (so they could be
    fixed == added to the gene info file)
  * Filter positions without transcript mapping
  * Filter positions with only intronic mapping
  * Filter positions too far from translation start or stop sites (> 500bp)
  * The remaining possible mappings are processed.
    Please note that the "coding region" is defined as the region starting at
    -15 nucleotides from the ATG to the end of the open reading frame.
    Please note that this script does not see the difference between the UTR and
    the intergenic sequence. Both are referred to as "UTR mappings".
    - 5' UTR or 3' UTR mappings, while mappings to the coding region are also
      available, are discarded.
    - If there are 5' UTR and 3' UTR mappings, but none in the coding
      region, we assume an intergenic situation and if one of the two
      positions is clearly closer to the coding region than the
      other (> 100bp), then the closest position is picked.
      If not, the position is discarded, and reported to the user.
    - After this, all mappings are counted by their coverage and
      reported.

Possible to do:
- Multiple 5' UTR *or* multiple 3' UTR mappings are all counted if these
  are the only mappings. Perhaps we should pick the closest, like as if
  both UTR mappings were present.



10) Now, it's time to try and find alternative Open Reading Frames (ORFs). The
find_ORFs.php script tries to identify "peaks" in the coverage pattern as
alternative open reading frame starts, depending on the coverage of the
surrounding region.

Usage:
./find_ORFs.php <MUTALYZER_RESULTS> <WIGGLE_FILE> <GENE_LIST_FILE> <STRAND>

Example:
./find_ORFs.php F.wig5_mutalyzer_batchfile_results.txt F.wig5 \
  mm10_gene_list.txt F
(Valid values for Strand: +, -, F and R)

Produces:
- *.ORF_analysis_results_stats.txt
  Statistics on the ORF finding run; information on the loaded gene list file
  and wiggle file, mentions the number of positions left out on each filtering
  step, and mentions the number of genes left with found translation start
  sites.
- *.ORF_analysis_results.txt
  The results file shows, per gene, the number of positions found, the number
  actually analyzed as candidate peaks, and the number of TSSs found. These are
  then reported with the genomic position, the coverage, and per transcript, the
  position relative to the transcript.
- *.ORF_analysis_results_after_cutoff.txt
  This file has the same format of the results file, but shows only TSSs found
  in the annotated coding region, at least 5000 bases from the annotated TSS.
  (the value of 5000 can be configured in the script)

The script does the following things:
+ Read out the coverage information from the Wiggle file
+ Read the gene list to find out which genes (transcripts, actually) are on
  which strand
+ Read the Mutalyzer result file to see which locations map to which
  transcripts, determining the position within the transcript
  * Filter low coverage positions (< 3)
  * Mappings on non-coding transcripts are ignored
  * Mappings on transcripts on the other strand are ignored
  * Transcripts not in the gene list are ignored and reported (so they could be
    fixed == added to the gene info file)
  * Filter positions without transcript mapping
  * Filter positions with only intronic mapping
  * Filter positions too far from translation start or stop sites (> 500bp)
  * The remaining possible mappings are processed.
    Please note that the "coding region" is defined as the region starting at
    -15 nucleotides from the ATG to the end of the open reading frame.
    Please note that this script does not see the difference between the UTR and
    the intergenic sequence. Both are referred to as "UTR mappings".
    - 3' UTR mappings, while mappings to the coding region or in the 5' UTR are
      also available, are discarded.
    - After this, all positions are stored, per gene, for the next step.
+ Peaks are searched for by walking through the positions, starting upstream.
  Each position, with at least a coverage of 10, is analyzed.
  * Its coverage should be higher than that of the positions located 3, 6, 9, 12
    and 15 nucleotides upstream of it.
  * Its coverage should be at least as high as that of the positions located 1
    and 2 nucleotides downstream of it.
  * It should show a triplet periodicity and a clear "harringtonine pattern":
    - The first nucleotide of the analyzed codon should have a coverage of at
      least 60% of the total coverage of that codon (configurable setting).
    - The following 5 codons should also not have a higher maximum coverage than
      this position's coverage.
    - If any of the following 5 codons have a maximum coverage higher than 10%
      of the coverage of the position we're analyzing, that codon must not show
      a conflicting triplet periodicity pattern (see first two points above).
  * If all these rules apply, the position is stored as a possible ORF start,
    and the analysis is continued 5 codons downstream, but again per nucleotide
    and thus allowing ORF start sites in any frame.
  * We currently assume that this will automatically filter out the background
    found at the end of some transcripts. This background is possible on
    transcripts with a length of 5K or higher, since harringtonine was applied
    for 5 minutes and translation speed is about 5.6 codons per second according
    to the literature (5.6 * 3 * 5 * 60 = 5040 nucleotides).
+ Per gene, from all its found possible ORF starts, we will take the one with
  the highest coverage as a reference, and discard any other candidate ORF
  starting points that do not have at least a coverage (on that position) of 10%
  of the reference (highest candidate).
+ All remaining candidate ORF starting points will be reported.
+ Problem: If two ORF starts are apart by less than 5 codons, this procedure
  will either not detect one of the two, or reject both because of each other's
  presence (most likely in the case of two ORFs in a different frame). We can
  decrease the required distance of 5 codons, if we believe that ORFs are not
  detected because of this.
+ Problem: Because of the background found in some longer transcripts, we will
  probably not pick up any ORF start sites within the affected region that use a
  different frame than the background, because the conflicting triplet
  periodicity pattern makes the algorithm reject the candidate. Analyzing the
  pattern in the background separately may in fact detect these ORF start sites.
  Please note that ORF start sites in any frame within 5KB of the primary ORF
  can still be detected, because they are not affected by the background noise.
+ Problem: Mutalyzer describes positions after the stop codon with an asterisk
  followed by the distance to the stop codon, e.g. *3. Since this script does
  not know the transcript lengths at the moment, it is unaware of the distance
  between a position in the coding region (e.g. 4623) and a position after the
  stop codon. Therefore, the checks of the coverage of the surrounding positions
  of a candidate translation start site will be incorrect or not be possible
  when this site is located around the annotated stop codon.
  This may cause false positives around the translation stop site, but not false
  negatives.
+ Genes that have no candidate peaks left, are ignored.
+ For all genes remaining, the positions of the candidate ORF start sites are
  reported relative to all known transcripts of the gene in question. The
  original number of positions with high coverage (>10) is mentioned along with
  the number of remaining candidate ORF start sites.
  Results are displayed as: genomic position, coverage, position on transcript.
  The last column may be repeated, depending on the number of known transcripts.
+ Additionally, a separate file reports all candidate peaks found at a position
  higher than 5Kb from a known ORF start site, so they can easily be checked
  more thoroughly if they are false positives.

Possible to do:
- Actually implement the filtering in the coding region? Is the proposed method
  OK?
- Filtering in the coding region against background measured per frame, so we
  can find alternative frames?



11) Now, the ORF files need to be grouped, per strand (F and R). The
merge_ORF_files.php script merges the files for you into one summary file, but
does not take care of the strands, so you need to make sure you don't mix
forward and reverse files with each other.

Usage:
./merge_ORF_files.php ORF_FILE1 [ORF_FILE2 [ORF_FILE3 [...]]]

Example:
./merge_ORF_files.php *.F.*.ORF_analysis_results.txt

Produces:
- One file which name depends on the given input files, ending in the suffix
  .merged_ORF_analyses.txt. The format is described below.

The script analyzes the file names to isolate the sample IDs. It assumes that
the sample IDs are the only differences between the input file names. The sample
IDs are also used in the headers of the output.

While grouping, it ignores the positions of the peaks on the transcripts. It
only reports the chromosomal position, per sample the coverage, and then as a
last column the gene name.

NOTE: When this script reports a coverage of 0, it simply means the position was
not recognized as a translation start site in that sample. The actual measured
coverage in that sample may not at all be 0.

Example output:
# Chromosome    Position    A1    A2    A3    C1    C2    C3    Gene
chr1            4857920     32    14    27     0     0    10    Tcea1
chr1            4857929     24     0    24     0     0     0    Tcea1



12) To see if we can lose background signal, we're repeating step 10, but with
the A and C samples merged. To do this, we are running the find_ORFs.php on the
merged Wiggle files and the Mutalyzer files, using a lower threshold (20 over 3
samples instead of 10 on 1 sample).

!!! Be sure to edit these settings in the script before running the analysis !!!

We merge the files like so:

Merging the Wiggle files:
wiggelen merge merged_A?.merged_wiggle.F.filtered.wig5 | \
  sed 's/^\([0-9]\+\) \([0-9]\+\)/\1\t\2/' \
  > merged_A.merged_wiggle.F.filtered.wig5

Merging the Mutalyzer files:
head -n 1 \
  merged_A1.merged_wiggle.F.filtered.wig5_mutalyzer_batchfile_results.txt \
  > merged_A.merged_wiggle.F.filtered.wig5_mutalyzer_batchfile_results.txt
grep -h "^chr" \
  merged_A?.merged_wiggle.F.filtered.wig5_mutalyzer_batchfile_results.txt | \
  sort -g | uniq \
  >> merged_A.merged_wiggle.F.filtered.wig5_mutalyzer_batchfile_results.txt

Please note that the order of the variants in the Mutalyzer results file is
not sorted properly, but the find_ORFs script fixes that.

Then the find_ORFs.php script is run:
Example:
./find_ORFs.php \
  merged_A.merged_wiggle.F.filtered.wig5_mutalyzer_batchfile_results.txt \
  merged_A.merged_wiggle.F.filtered.wig5 mm10_gene_list.txt F
(Valid values for Strand: +, -, F and R)

Then the results are merged:
./merge_ORF_files.php \
  merged_?.merged_wiggle.F.filtered.wig5.ORF_analysis_results.txt
./merge_ORF_files.php \
  merged_?.merged_wiggle.R.filtered.wig5.ORF_analysis_results.txt

The merge_ORF_files.php script has been modified to detect it's running on the
results of merged samples, and it will attempt to find the original Wiggle files
to be able to show the original coverages of the individual samples, on each of
the found positions.



13) For some statistics on where in the genes the found TISs are, as well as TIS
motif analysis and reporting of the sequence between each 5'UTR TIS and the
annotated TIS, we can analyze the ORF analysis results files of the merged
replicates using the generate_stats_peaks_per_location.php script. It takes all
ORF analysis results files, both the results after the cutoff as the ones
before, and sums up the number of peaks found per location: 5' UTR, annotated
TIS, coding, 3' UTR, or multiple.
"Multiple" means that the TIS location was mapping to multiple transcripts, and
in at least two of these, the location was different. An exception here is when
one of the locations where the TIS maps to, is "annotated_TIS". Then it is
assumed that the other transcripts with other positions are not the translated
transcripts.

Note, that to determine the locations of the reads, the positions that are given
by the find_ORFs.php script have to be increased by 12 bases, since these are
the 5' ends of the reads. This means that positions -12 through -10 are counted
as annotated TIS. Lower numbers are counted as 5'UTR, while higher numbers
(> -10) are counted as coding. Positions starting with an asterisk (*) are
counted as 3'UTR.

This also means that read start positions at the end of the coding region, less
than 12 bp away from the 3'UTR, are counted as coding while in fact in reality
they represent a read that lies in the 3'UTR. This can not be detected however,
because we don't know the length of the coding region of the transcripts.

To be able to report the TIS codon motifs and the sequence between each 5'UTR
TIS and the annotated TIS, the script downloads the RefSeq sequences of the
transcripts that the read was aligned to automatically from the NCBI website,
using the URL format:
http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=NM_007386.2.gb&rettype=gb

To prevent repeated downloads on successive runs of the script, it requires an
"NM cache" directory where all downloaded sequences are stored and can be re-
used by successive runs. The name of the directory is currently configured in
the $_SETT settings array within the script. If the directory is not found or
not writable, the script will complain and refuse execution. When that happens,
check if the directory can be made writable. Otherwise create an empty directory
and set its name in the settings in the script source code.

Usage:
./generate_stats_peaks_per_location.php ORF_FILE1 [ORF_FILE2 [ORF_FILE3 [...]]]

Example:
./generate_stats_peaks_per_location.php *ORF_analysis_results*

Produces:
- *.ORF_analysis_results.stats_peaks_per_location.txt (one per sample)
  Reports the total number of TISs found as well as the total coverage of found
  TISs per gene region (5'UTR, annotated TIS, coding, 3'UTR, multiple). Both are
  reported since a high number of identified TISs may not correlate to also
  having high coverage in this region.
  The statistics are reported separately for all peaks before the cutoff and all
  peaks including the ones after the cutoff.
- *.ORF_analysis_results.peaks_classification.txt (one per sample)
  Reports all found TISs before the set cutoff, sorted on category, strand and
  genomic position. Other fields reported are the "real" genomic position of the
  TIS, calculated by adding (or substracting, for the negative strand) an offset
  of 12 nucleotides to the 5' read genomic positions, the gene, the summed
  coverage of the replicates in that position, the transcript RefSeq ID (only
  one reported), the position on that transcript including the position with the
  offset of 12 applied and the sequence of the codon at the reported TIS.
  For TISs reported in the category "multiple", the information in the last four
  columns is missing.
  In case the RefSeq file has no CDS annotated, instead of the motif sequence
  the error "could_not_parse_CDS" is given.
  In case the RefSeq file has no 5'UTR annotated (CDS starts at position 1),
  instead of the motif sequence the error "no_5UTR" is given.
  In case the RefSeq file has not enough 5'UTR annotated to fetch the full motif
  sequence (CDS starts at a position smaller than the distance of the TIS to the
  annotated TIS), instead of the motif sequence the error "unannotated_5UTR" is
  given.
- *.ORF_analysis_results.peaks_classification_5UTR.txt (one per sample)
  Reports all TISs found in the 5'UTR, sorted on strand and genomic position.
  The fields reported are very similar to the fields mentioned in the previous
  file, with the following exceptions: the motif field is missing, and the
  following two fields are added: the DNA sequence starting at the TIS until the
  annotated TIS, and the translation of this sequence to protein sequence. If a
  found TIS can be mapped to different transcripts at different distances from
  the annotated TIS, all these transcripts are reported on a separate line.
  The protein sequence can contain a *, which indicates a stop-codon. A ?
  indicates an incomplete or unrecognizable codon. This should happen only if
  the sequence is in a different frame compared with the annotated TIS; in this
  case the DNA sequence given will end with an incomplete codon and the trans-
  lated sequence will end with a ?.
  Error messages that might be reported instead of sequence, are explained above
  in the description of the previous file.

The script is using the given file names to filter out the statistics files
generated by the find_ORFs.php script. Its own result files, as well as all
files containing 'ORF_analysis_results_stats', are ignored automatically. Files
need to contain the strand information ('.F.' or '.R.') and must end with either
'ORF_analysis_results.txt' or 'ORF_analysis_results_after_cutoff.txt'. Files are
grouped by their file name's prefix (until the strand information). As such, per
sample the script can find four files; two forward strand and two reverse
strand; each a file with peaks before cutoff, and one with peaks after the
cutoff.
If files are passed for which the file name is not recognized, they are reported
and the script will stop processing.





ADDITIONAL SCRIPTS
--------------------------------------------------------------------------------
1) mrna_sequence_report.php

Purpose:
Takes labels and genomic positions from a file manually generated, imports the
transcriptomic coordinates from the ORF analysis results file(s), fetches the
sequence of the TSS until the end of the transcript, translates the sequence,
and reports the protein sequence until the first stop.

Usage:
./mrna_sequence_report.php POSITIONS_FILE [PEAKS_CLASSIFICATION_FILE [...]]

Example:
./mrna_sequence_report.php list_for_TPPanalysis.txt
or
./mrna_sequence_report.php list_for_TPPanalysis.txt \
    merged_A.merged_wiggle.ORF_analysis_results.peaks_classification.txt \
    merged_C.merged_wiggle.ORF_analysis_results.peaks_classification.txt

If no specific peaks classification files are passed as arguments, all files in
the current directory ending in '.ORF_analysis_results.peaks_classification.txt'
are parsed.

Input file format example:
>RPL7_atg_outofframe
chr1:16103318
>RPL34_aag_inframe
chr3:130728824
>RPL34_aga_outofframe
chr3:130728823

Note that not all position requires a header; more positions per header are
allowed.

Produces:
- One file (input file name with suffix '.mRNA_sequence_report.txt'), with the
  used peaks classification files in the headers, and the following format:

# /home/ifokkema/scripts/labj/eleonora/ribosome_profiling/mrna_sequence_report.php v.0.3
# Imported transcriptomic positions from merged_A.merged_wiggle.ORF_analysis_results.peaks_classification.txt
# Imported transcriptomic positions from merged_C.merged_wiggle.ORF_analysis_results.peaks_classification.txt

# PeakPosGenomic	RefSeqID	PosTrans+12	DNASeqToSTOP	DNASeq	ProtSeqToSTOP
>RPL7_atg_outofframe
chr1:16103318	NM_011291.5	218	atgagaaggcaaagcactatcacaaggagtacaggcagatgtaccgcactgagattcggatggccaggatggcaaggaaagctggcaacttctatgtgcccgcagaaccaaagctggcctttgtcatcagaattcgaggtatcaatggagtaa	atgagaaggcaaagcactatcacaaggagtacaggcagatgtaccgcactgagattcggatggccaggatggcaaggaaagctggcaacttctatgtgcccgcagaaccaaagctggcctttgtcatcagaattcgaggtatcaatggagtaagcccaaaggttcgtaaggttctgcagctccttcgtcttcgacagatcttcaatggcacctttgttaagctcaacaaggcttcaattaacatgctgcggattgtggagccatacattgcatgggggtaccccaacctgaagtcagtaaacgagctcatctacaagcgaggctacggcaaaatcaacaagaagcggattgccttgacagataattccttgattgctcggtctcttggtaagtttggcatcatctgcatggaggatctaattcatgagatctatacagtcgggaaacgcttcaaggaagcaaataacttcctgtggcccttcaagttatcttccccacgaggtgggatgaagaaaaagacaactcactttgtagaaggtggagatgctggcaacagggaagaccagataaacaggcttattagacggatgaactaaggtgtcacccattgtatttttgtaatctggtcagttaataaacagtcacagcttggcaaattgaaaaaa	MRRQSTITRSTGRCTALRFGWPGWQGKLATSMCPQNQSWPLSSEFEVSME*
>RPL34_aag_inframe
chr3:130728824	NM_001005859.2	205	aagacacagaagcacgtcagcagggcctatggcggctccatgtgtgccaagtgtgtccgtgacaggatcaagcgggctttccttattgaggagcagaaaatcgttgtgaaagtcttgaaggcacaagcacagagtcagaaagcaaaatag	aagacacagaagcacgtcagcagggcctatggcggctccatgtgtgccaagtgtgtccgtgacaggatcaagcgggctttccttattgaggagcagaaaatcgttgtgaaagtcttgaaggcacaagcacagagtcagaaagcaaaatagatatgcacattttttaagtaataaaaatcaagacttga	KTQKHVSRAYGGSMCAKCVRDRIKRAFLIEEQKIVVKVLKAQAQSQKAK*
>RPL34_aga_outofframe
chr3:130728823	NM_001005859.2	206	agacacagaagcacgtcagcagggcctatggcggctccatgtgtgccaagtgtgtccgtgacaggatcaagcgggctttccttattgaggagcagaaaatcgttgtga	agacacagaagcacgtcagcagggcctatggcggctccatgtgtgccaagtgtgtccgtgacaggatcaagcgggctttccttattgaggagcagaaaatcgttgtgaaagtcttgaaggcacaagcacagagtcagaaagcaaaatagatatgcacattttttaagtaataaaaatcaagacttga	RHRSTSAGPMAAPCVPSVSVTGSSGLSLLRSRKSL*




